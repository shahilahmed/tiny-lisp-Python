## Closure## (defun  (times x) (lambda (y) (mul x y)))## (define  times6 (times 6))## (print ((times  5) 7) (println))## (print  (times6 7) (println))(print "Hello World" (println))## (define n 7)## (defun (sq x) (mul x x))## (defun (fact n) (if (le n 1) 1 (mul n (fact (sub n 1)) ) ))## (block## (block (print "Square of " n " : " (sq n) (println))) (print "Fact of " n " is: " (fact n) (println)))## (cond ((ne 7 8) (add 7 8)) ((eq 9 9) (add 10 20)))## (define fact (lambda (n) (if (lt n 2)  1 (mul n (fact (sub n 1))))))## (fact 5)## (define fibo (lambda (n) (if (le n 1)  1 (add (fibo (sub n 1)) (fibo (sub n 2))))))## (fibo 10)## (define fact (lambda (n) (if (lt n 2)  1 (mul n (fact (sub n 1))))))## (fact 5)## (define fibo (lambda (n) (if (le n 1)  1 (add (fibo (sub n 1)) (fibo (sub n 2))))))## (fibo 10)##(mul pi 2)##(set pi 9)##(define s (lambda (x y) (add x y)))##(s 6 5) ##(if (ne 6 6) (add 6 4) (sub 6 4))##(add pi 2)##(shl 1 2 2 2)##(if (eq 9 6) (add "faLSe" nil num2 num_86 _num77 _num) (sub true 4))##(add 7 9 (add 76 45 12))# (def	# (fact $n)	# (block		# (let ($i 1) ($res 1))		# (while (<= $i 1)			# (block			# (* res $i)			# (+ $i 1)		# ))		# (return $res)# ))# (def 	# (calculate $op $n1 $n2)	# (block 		# (let ($res 0))		# (if (== $op 0) (= $res (+ $n1 $n2)))		# (if (== $op 1) (= $res (- $n1 $n2)))		# (return $res)# ))# (def 	# (main)	# (block		# (let ($op 3) ($n1 9) ($n2 3))		# (print (calculate $op $n1 $n2))# ))# (* (+ $n1 7) (- (+ 4 3) $n2))# (* (+ $n2 $n2) (- $n3 $n3))